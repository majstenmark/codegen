/* Generated By:JJTree&JavaCC: Do not edit this line. XmlParserTokenManager.java */
package sfcAST;

public class XmlParserTokenManager implements XmlParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1400000000003080L) != 0L)
            return 22;
         if ((active1 & 0x2000000L) != 0L)
            return 13;
         if ((active0 & 0xebffffffffffcf00L) != 0L || (active1 & 0xffL) != 0L)
         {
            jjmatchedKind = 80;
            return 22;
         }
         if ((active1 & 0x78000000L) != 0L)
            return 7;
         return -1;
      case 1:
         if ((active0 & 0x40000000000000L) != 0L)
            return 22;
         if ((active0 & 0xebbfffffffffff80L) != 0L || (active1 & 0xffL) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 1;
            return 22;
         }
         if ((active1 & 0x10000000L) != 0L)
            return 6;
         return -1;
      case 2:
         if ((active0 & 0x2080L) != 0L || (active1 & 0x20L) != 0L)
            return 22;
         if ((active0 & 0xebbfffffffffdf00L) != 0L || (active1 & 0xdfL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 2;
            }
            return 22;
         }
         return -1;
      case 3:
         if ((active0 & 0x10000000L) != 0L)
            return 22;
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0xebbfffffefffef00L) != 0L || (active1 & 0xdfL) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 3;
            return 22;
         }
         return -1;
      case 4:
         if ((active0 & 0x4002008200004000L) != 0L)
            return 22;
         if ((active0 & 0xabbdff7defffaf00L) != 0L || (active1 & 0xdfL) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 4;
            return 22;
         }
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0x8000040020060200L) != 0L || (active1 & 0x1L) != 0L)
            return 22;
         if ((active0 & 0x2bbdfb7dcff98d00L) != 0L || (active1 & 0xdeL) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 5;
            return 22;
         }
         if ((active0 & 0x2000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x200000004a00900L) != 0L)
            return 22;
         if ((active0 & 0x2000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x29bdfb7dcb598400L) != 0L || (active1 & 0xdeL) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 6;
            return 22;
         }
         return -1;
      case 7:
         if ((active0 & 0x11123000000400L) != 0L || (active1 & 0x4L) != 0L)
            return 22;
         if ((active0 & 0x2000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x29ace94dcb598000L) != 0L || (active1 & 0xdaL) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 7;
            return 22;
         }
         return -1;
      case 8:
         if ((active0 & 0x804200080000000L) != 0L)
            return 22;
         if ((active0 & 0x21a8c94d4b598000L) != 0L || (active1 & 0xdaL) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 8;
            return 22;
         }
         if ((active0 & 0x2000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x440a080000L) != 0L || (active1 & 0x18L) != 0L)
            return 22;
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x21a8c90941518000L) != 0L || (active1 & 0xc2L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 9;
            return 22;
         }
         return -1;
      case 10:
         if ((active0 & 0x101000000L) != 0L)
            return 22;
         if ((active0 & 0x21a8c90840518000L) != 0L || (active1 & 0xc2L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 10;
            return 22;
         }
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x80010000100000L) != 0L || (active1 & 0x2L) != 0L)
            return 22;
         if ((active0 & 0x2128c80840418000L) != 0L || (active1 & 0xc0L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 11;
            return 22;
         }
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x8000800018000L) != 0L || (active1 & 0x40L) != 0L)
            return 22;
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x2120c80040400000L) != 0L || (active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 12;
            return 22;
         }
         return -1;
      case 13:
         if ((active0 & 0x100880000000000L) != 0L)
            return 22;
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x2020400040400000L) != 0L || (active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 13;
            return 22;
         }
         return -1;
      case 14:
         if ((active0 & 0x2000000000000000L) != 0L)
            return 22;
         if ((active0 & 0x20400040400000L) != 0L || (active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 14;
            return 22;
         }
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0x20000000000000L) != 0L)
            return 22;
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x400040400000L) != 0L || (active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 15;
            return 22;
         }
         return -1;
      case 16:
         if ((active0 & 0x400000L) != 0L)
            return 22;
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x400040000000L) != 0L || (active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 16;
            return 22;
         }
         return -1;
      case 17:
         if ((active1 & 0x80L) != 0L)
            return 22;
         if ((active0 & 0x400040000000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 17;
            return 22;
         }
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active0 & 0x400040000000L) != 0L)
            return 22;
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 20:
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 21:
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 22:
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 23:
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 24:
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 25:
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 26:
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 27:
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 2);
      case 10:
         return jjStopAtPos(0, 3);
      case 12:
         return jjStopAtPos(0, 5);
      case 13:
         return jjStopAtPos(0, 4);
      case 32:
         return jjStopAtPos(0, 1);
      case 40:
         return jjStopAtPos(0, 87);
      case 41:
         return jjStopAtPos(0, 88);
      case 46:
         return jjStartNfaWithStates_0(0, 89, 13);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000L);
      case 59:
         return jjStopAtPos(0, 90);
      case 60:
         jjmatchedKind = 93;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x58000000L);
      case 61:
         return jjStopAtPos(0, 97);
      case 62:
         return jjStopAtPos(0, 95);
      case 63:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x4002000000000L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x810400000000000L, 0x0L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x8008000020100000L, 0x8L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x200L, 0x42L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x100000000040000L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 85);
      case 93:
         return jjStopAtPos(0, 86);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x80L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x220028000000000L, 0x1L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1000800000000L, 0x4L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x4000400L, 0x20L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x10L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x40020000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x40010000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x40000080000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x2804182000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x180001000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0xa00000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x4000000000418800L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L);
      case 120:
         jjmatchedKind = 60;
         return jjMoveStringLiteralDfa1_0(0x3080L, 0x0L);
      case 121:
         return jjStartNfaWithStates_0(0, 58, 22);
      case 123:
         return jjStopAtPos(0, 83);
      case 125:
         return jjStopAtPos(0, 84);
      default :
         return jjMoveNfa_0(8, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(1, 92, 6);
         break;
      case 47:
         if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         break;
      case 62:
         if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 96);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 98);
         break;
      case 63:
         if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 94);
         break;
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0x8008000020100000L, active1, 0x8L);
      case 71:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000240110000000L, active1, 0x42L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000088000000L, active1, 0x80L);
      case 100:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 54, 22);
         break;
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000420800L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000001000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x80100001c000L, active1, 0x4L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x2080L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x804012004000400L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x20201ac042080000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000800200000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x801000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000040000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x10400000000000L, active1, 0x20L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x286002084000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x604002000400L, active1, 0x1L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x284000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x818000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x10010000021000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0L);
      case 108:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4000009000002000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x800010000000L, active1, 0x4L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x20060400000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10L);
      case 112:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 69, 22);
         break;
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x2100000041440800L, active1, 0x42L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000008000000L, active1, 0x80L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000800000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L, active1, 0L);
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L, active1, 0x4L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0x42L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x100004000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 22);
         return jjMoveStringLiteralDfa4_0(active0, 0x800481501000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000068080000L, active1, 0x80L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000004002000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x86002000000000L, active1, 0x1L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x208000080002000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000040400L, active1, 0x8L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000100000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x1020800000800L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x8010010000404000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000800000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x18000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L, active1, 0L);
      case 73:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 22);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000200L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10L);
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000018000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000100000000L, active1, 0L);
      case 89:
         return jjMoveStringLiteralDfa5_0(active0, 0x100L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x1100000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L, active1, 0x8L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000400L, active1, 0L);
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 22);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 62, 22);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000004002000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L, active1, 0L);
      case 104:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 22);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x28010000400800L, active1, 0x5L);
      case 106:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x800004000000L, active1, 0x42L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x300080020001000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x4202008000000L, active1, 0x80L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 22);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000400000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000002000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000200000L, active1, 0L);
      case 122:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L, active1, 0L);
      case 67:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 22);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa6_0(active0, 0x800200000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x80831000000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10L);
      case 99:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 22);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L, active1, 0x4L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L, active1, 0L);
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 22);
         return jjMoveStringLiteralDfa6_0(active0, 0x200100104200000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x104002000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x80400L, active1, 0L);
      case 106:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 22);
         break;
      case 107:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 29, 22);
         break;
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x42L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x808100000L, active1, 0x80L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000040819800L, active1, 0L);
      case 112:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 22);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 17, 22);
         return jjMoveStringLiteralDfa6_0(active0, 0x38404002000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8L);
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80L);
      case 69:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 22);
         break;
      case 72:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000480000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x100080000000L, active1, 0L);
      case 100:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 22);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 26, 22);
         break;
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0x42L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x28400000000000L, active1, 0L);
      case 106:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10L);
      case 107:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4L);
      case 108:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 57, 22);
         return jjMoveStringLiteralDfa7_0(active0, 0x10400000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0x8L);
      case 110:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 11, 22);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 23, 22);
         return jjMoveStringLiteralDfa7_0(active0, 0x20040000400L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x81000100000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x118000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x800a00800000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 86:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x108000400001000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 36, 22);
         return jjMoveStringLiteralDfa8_0(active0, 0x800200808000000L, active1, 0x18L);
      case 103:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 10, 22);
         break;
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x80800000118000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x80400000L, active1, 0xc2L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 37, 22);
         break;
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x20404002000000L, active1, 0L);
      case 112:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 52, 22);
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L, active1, 0L);
      case 115:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(7, 66, 22);
         return jjMoveStringLiteralDfa8_0(active0, 0x100002000L, active1, 0L);
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 41, 22);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 44, 22);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 48, 22);
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 74:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2L);
      case 83:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L, active1, 0x40L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x80010040000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 31, 22);
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000001000000L, active1, 0L);
      case 105:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(8, 13);
         return jjMoveStringLiteralDfa9_0(active0, 0x80100000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000080000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x20400000000000L, active1, 0x8L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L, active1, 0x80L);
      case 112:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 45, 22);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 59, 22);
         break;
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000802000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x4400000000L, active1, 0L);
      case 116:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 50, 22);
         return jjMoveStringLiteralDfa9_0(active0, 0x118000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000L, active1, 0x80L);
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(9, 19, 22);
         return jjMoveStringLiteralDfa10_0(active0, 0x1001000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000118000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x10040000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x880000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000L, active1, 0x2L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40L);
      case 115:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(9, 34, 22);
         break;
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(9, 25, 22);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(9, 27, 22);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 38, 22);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(9, 67, 22);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(9, 68, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 77:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x100080800000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(10, 24, 22);
         break;
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000000000L, active1, 0x2L);
      case 107:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x80L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000000L, active1, 0x40L);
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(10, 32, 22);
         break;
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x118000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000400000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 86:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x80L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0x840000000L, active1, 0L);
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 40, 22);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 55, 22);
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x40L);
      case 106:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(11, 20, 22);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(11, 65, 22);
         return jjMoveStringLiteralDfa12_0(active0, 0x80000018000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000400000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 88:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(12, 16, 22);
         break;
      case 89:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(12, 15, 22);
         break;
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(12, 35, 22);
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000000000L, active1, 0x80L);
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000000400000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000000L, active1, 0L);
      case 112:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 51, 22);
         break;
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000L, active1, 0L);
      case 116:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(12, 70, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000000001000L, active1, 0L);
      case 101:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 43, 22);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 47, 22);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 56, 22);
         break;
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000000L, active1, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000000000L, active1, 0x80L);
      case 108:
         return jjMoveStringLiteralDfa15_0(active0, 0x20000040000000L, active1, 0L);
      case 116:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 61, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1);
      return 15;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa16_0(active0, 0x1000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x80L);
      case 101:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 53, 22);
         break;
      case 108:
         return jjMoveStringLiteralDfa16_0(active0, 0x40000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1);
      return 16;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa17_0(active0, 0x40000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0x400000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x80L);
      case 114:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(16, 22, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(15, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, active1);
      return 17;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa18_0(active0, 0x40000000L, active1, 0L);
      case 101:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(17, 71, 22);
         break;
      case 104:
         return jjMoveStringLiteralDfa18_0(active0, 0x1000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0x400000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, active1);
}
private final int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(16, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa19_0(active0, 0x1000L);
      case 110:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(18, 46, 22);
         break;
      case 114:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(18, 30, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L);
}
private final int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 109:
         return jjMoveStringLiteralDfa20_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L);
}
private final int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa21_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L);
}
private final int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa22_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0, 0L);
}
private final int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa23_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0, 0L);
}
private final int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa24_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0, 0L);
}
private final int jjMoveStringLiteralDfa24_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa25_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(23, active0, 0L);
}
private final int jjMoveStringLiteralDfa25_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(23, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0, 0L);
      return 25;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa26_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(24, active0, 0L);
}
private final int jjMoveStringLiteralDfa26_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(24, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, active0, 0L);
      return 26;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa27_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(25, active0, 0L);
}
private final int jjMoveStringLiteralDfa27_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(25, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, active0, 0L);
      return 27;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa28_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(26, active0, 0L);
}
private final int jjMoveStringLiteralDfa28_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(26, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, active0, 0L);
      return 28;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(28, 12);
         break;
      default :
         break;
   }
   return jjStartNfa_0(27, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 53;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  else if (curChar == 39)
                     jjCheckNAddStates(7, 10);
                  else if (curChar == 36)
                  {
                     if (kind > 80)
                        kind = 80;
                     jjCheckNAdd(22);
                  }
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(19, 20);
                  else if (curChar == 46)
                     jjCheckNAdd(13);
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 7;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 72)
                        kind = 72;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 72)
                        kind = 72;
                     jjCheckNAddStates(11, 13);
                  }
                  break;
               case 0:
                  if (curChar == 45)
                     jjCheckNAddStates(14, 16);
                  break;
               case 1:
                  if ((0xffffdfffffffffffL & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 2:
                  if (curChar == 45)
                     jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar == 62 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 7:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 9:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 12:
                  if (curChar == 46)
                     jjCheckNAdd(13);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddStates(17, 19);
                  break;
               case 15:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(16, 17);
                  break;
               case 18:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 19:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 20:
                  if (curChar == 34 && kind > 79)
                     kind = 79;
                  break;
               case 21:
                  if (curChar != 36)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAdd(22);
                  break;
               case 22:
                  if ((0x3ff201000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAdd(22);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 25:
                  if (curChar != 46)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddStates(20, 22);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddStates(20, 22);
                  break;
               case 28:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(29, 17);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 32:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(33);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(33, 17);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(23, 25);
                  break;
               case 36:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(37, 17);
                  break;
               case 38:
                  if (curChar != 48)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAddStates(11, 13);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAddTwoStates(40, 11);
                  break;
               case 41:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAddTwoStates(41, 11);
                  break;
               case 42:
                  if (curChar == 39)
                     jjCheckNAddStates(7, 10);
                  break;
               case 43:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 44:
                  if (curChar == 39 && kind > 78)
                     kind = 78;
                  break;
               case 46:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 47:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 44);
                  break;
               case 48:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 49:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 50:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(48);
                  break;
               case 51:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 52:
                  if (curChar == 39 && kind > 79)
                     kind = 79;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 8:
               case 22:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAdd(22);
                  break;
               case 1:
                  jjAddStates(14, 16);
                  break;
               case 11:
                  if ((0x100000001000L & l) != 0L && kind > 72)
                     kind = 72;
                  break;
               case 14:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(26, 27);
                  break;
               case 17:
                  if ((0x5000000050L & l) != 0L && kind > 76)
                     kind = 76;
                  break;
               case 19:
                  jjAddStates(28, 29);
                  break;
               case 27:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(30, 31);
                  break;
               case 31:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(32, 33);
                  break;
               case 35:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(34, 35);
                  break;
               case 39:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(40);
                  break;
               case 40:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAddTwoStates(40, 11);
                  break;
               case 43:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 45:
                  if (curChar == 92)
                     jjAddStates(36, 38);
                  break;
               case 46:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 51:
                  jjAddStates(39, 40);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 8:
               case 22:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAdd(22);
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(14, 16);
                  break;
               case 19:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(28, 29);
                  break;
               case 43:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 51:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(39, 40);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 53 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x2000000L) != 0L)
            return 13;
         if ((active1 & 0x78000000L) != 0L)
            return 7;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 2);
      case 10:
         return jjStopAtPos(0, 3);
      case 12:
         return jjStopAtPos(0, 5);
      case 13:
         return jjStopAtPos(0, 4);
      case 32:
         return jjStopAtPos(0, 1);
      case 40:
         return jjStopAtPos(0, 87);
      case 41:
         return jjStopAtPos(0, 88);
      case 46:
         return jjStartNfaWithStates_1(0, 89, 13);
      case 59:
         return jjStopAtPos(0, 90);
      case 60:
         jjmatchedKind = 93;
         return jjMoveStringLiteralDfa1_1(0x58000000L);
      case 61:
         return jjStopAtPos(0, 97);
      case 62:
         return jjStopAtPos(0, 95);
      case 63:
         return jjMoveStringLiteralDfa1_1(0x100000000L);
      case 91:
         return jjStopAtPos(0, 85);
      case 93:
         return jjStopAtPos(0, 86);
      case 123:
         return jjStopAtPos(0, 83);
      case 125:
         return jjStopAtPos(0, 84);
      default :
         return jjMoveNfa_1(8, 0);
   }
}
private final int jjMoveStringLiteralDfa1_1(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_1(1, 92, 6);
         break;
      case 47:
         if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         break;
      case 62:
         if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 96);
         break;
      case 63:
         if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 94);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, 0L, active1);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 53;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  else if (curChar == 39)
                     jjCheckNAddStates(7, 10);
                  else if (curChar == 36)
                  {
                     if (kind > 80)
                        kind = 80;
                     jjCheckNAdd(22);
                  }
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(19, 20);
                  else if (curChar == 46)
                     jjCheckNAdd(13);
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 7;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 72)
                        kind = 72;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 72)
                        kind = 72;
                     jjCheckNAddStates(11, 13);
                  }
                  break;
               case 0:
                  if (curChar == 45)
                     jjCheckNAddStates(14, 16);
                  break;
               case 1:
                  if ((0xffffdfffffffffffL & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 2:
                  if (curChar == 45)
                     jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar == 62 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 7:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 9:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 12:
                  if (curChar == 46)
                     jjCheckNAdd(13);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddStates(17, 19);
                  break;
               case 15:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(16, 17);
                  break;
               case 18:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 19:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 20:
                  if (curChar == 34 && kind > 79)
                     kind = 79;
                  break;
               case 21:
                  if (curChar != 36)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAdd(22);
                  break;
               case 22:
                  if ((0x3ff201000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAdd(22);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 25:
                  if (curChar != 46)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddStates(20, 22);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddStates(20, 22);
                  break;
               case 28:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(29, 17);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 32:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(33);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(33, 17);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(23, 25);
                  break;
               case 36:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(37, 17);
                  break;
               case 38:
                  if (curChar != 48)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAddStates(11, 13);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAddTwoStates(40, 11);
                  break;
               case 41:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAddTwoStates(41, 11);
                  break;
               case 42:
                  if (curChar == 39)
                     jjCheckNAddStates(7, 10);
                  break;
               case 43:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 44:
                  if (curChar == 39 && kind > 78)
                     kind = 78;
                  break;
               case 46:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 47:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 44);
                  break;
               case 48:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 49:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 50:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(48);
                  break;
               case 51:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 52:
                  if (curChar == 39 && kind > 79)
                     kind = 79;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 8:
               case 22:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAdd(22);
                  break;
               case 1:
                  jjAddStates(14, 16);
                  break;
               case 11:
                  if ((0x100000001000L & l) != 0L && kind > 72)
                     kind = 72;
                  break;
               case 14:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(26, 27);
                  break;
               case 17:
                  if ((0x5000000050L & l) != 0L && kind > 76)
                     kind = 76;
                  break;
               case 19:
                  jjAddStates(28, 29);
                  break;
               case 27:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(30, 31);
                  break;
               case 31:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(32, 33);
                  break;
               case 35:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(34, 35);
                  break;
               case 39:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(40);
                  break;
               case 40:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAddTwoStates(40, 11);
                  break;
               case 43:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 45:
                  if (curChar == 92)
                     jjAddStates(36, 38);
                  break;
               case 46:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 51:
                  jjAddStates(39, 40);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 8:
               case 22:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAdd(22);
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(14, 16);
                  break;
               case 19:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(28, 29);
                  break;
               case 43:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 51:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(39, 40);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 53 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   24, 25, 30, 31, 34, 35, 17, 43, 45, 51, 52, 39, 41, 11, 1, 2, 
   5, 13, 14, 17, 26, 27, 17, 34, 35, 17, 15, 16, 19, 20, 28, 29, 
   32, 33, 36, 37, 46, 47, 49, 51, 52, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\170\155\154", 
"\104\117\103\124\131\120\105", "\120\125\102\114\111\103", "\145\156\143\157\144\151\156\147", 
"\166\145\162\163\151\157\156", 
"\170\163\151\72\156\157\116\141\155\145\163\160\141\143\145\123\143\150\145\155\141\114\157\143\141\164\151\157\156", "\170\155\154\156\163\72\170\163\151", "\167\151\144\164\150", 
"\166\151\145\167\120\157\163\151\164\151\157\156\131", "\166\151\145\167\120\157\163\151\164\151\157\156\130", 
"\150\145\151\147\150\164", "\123\164\162\157\153\145", "\155\157\144\151\146\151\141\142\154\145", 
"\107\103\124\162\141\156\163\151\164\151\157\156", "\165\160\144\141\164\145\144", 
"\166\145\162\164\151\143\141\154\123\143\162\157\154\154\102\141\162", "\165\163\145\111\143\157\156", 
"\164\150\162\145\141\144\123\160\145\145\144", "\163\157\143\153\145\164\120\157\162\164", "\145\156\141\142\154\145\144", 
"\141\143\164\151\157\156\124\145\170\164", "\156\141\155\145", "\107\103\114\151\156\153", 
"\150\157\162\151\172\157\156\164\141\154\123\143\162\157\154\154\102\141\162", "\163\143\141\156\103\171\143\154\145", 
"\163\141\166\145\126\145\162\163\151\157\156", "\103\107\125\122\111", "\157\167\156\145\162\103\154\141\163\163", 
"\144\160\167\163\111\156\164\145\162\146\141\143\145", "\146\151\154\145\116\141\155\145", "\101\156\141\154\157\147\111\156", 
"\163\157\143\153\145\164\110\157\163\164", "\143\157\154\157\162", "\151\156\151\164\151\141\154\126\141\154\165\145", 
"\143\157\156\163\164\141\156\164", "\155\141\156\101\144\152", 
"\164\157\153\145\156\114\165\155\151\156\141\156\143\145", "\164\157\117\142\152\145\143\164", "\115\141\143\162\157\123\164\145\160", 
"\105\170\143\145\160\164\151\157\156\124\162\141\156\163\151\164\151\157\156", "\163\151\155\165\154\141\164\151\157\156\115\157\144\145", 
"\144\160\167\163\120\157\162\164", "\163\143\141\154\145", "\101\156\141\154\157\147\117\165\164", 
"\107\103\111\156\151\164\151\141\154\123\164\145\160", "\105\170\151\164\123\164\145\160", 
"\143\157\156\144\151\164\151\157\156\126\151\163\151\142\154\145", "\151\144", "\122\145\141\154\126\141\162\151\141\142\154\145", 
"\123\164\162\151\156\147\126\141\162\151\141\142\154\145", "\143\150\141\156\156\145\154", "\171", 
"\105\156\164\145\162\123\164\145\160", "\170", "\127\157\162\153\163\160\141\143\145\117\142\152\145\143\164", 
"\166\141\154\165\145", "\107\103\123\164\145\160", "\143\171\143\154\151\143", 
"\120\141\162\141\154\154\145\154\112\157\151\156", "\144\151\155\124\151\143\153\163", 
"\107\103\104\157\143\165\155\145\156\164", "\146\162\157\155\117\142\152\145\143\164", "\145\170\160", 
"\120\141\162\141\154\154\145\154\123\160\154\151\164", "\141\143\164\151\157\156\102\154\157\143\153\126\151\163\151\142\154\145", 
null, null, null, null, null, null, null, null, null, null, null, "\173", "\175", 
"\133", "\135", "\50", "\51", "\56", "\73", "\74\57", "\74\41", "\74", "\74\77", 
"\76", "\77\76", "\75", "\57\76", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "BOUNDS", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 1, 1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffff81L, 0x7fff9d1ffL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x7eL, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[53];
private final int[] jjstateSet = new int[106];
protected char curChar;
public XmlParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public XmlParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 53; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
           }
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
