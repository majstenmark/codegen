/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. /Users/maj/Documents/workspace/sfctest/sfcAST/sfc.jj */
/*@egen*//* -*-Java-*- */

options {                                                                                                                                                                                                       
    JAVA_UNICODE_ESCAPE         = true;
    STATIC                      = false;
} 

PARSER_BEGIN(XmlParser)
    package sfcAST;
    public class XmlParser/*@bgen(jjtree)*/implements XmlParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTXmlParserState jjtree = new JJTXmlParserState();

/*@egen*/
}
PARSER_END(XmlParser)

//----------------------------------------------//
//                LEXICAL TOKENS                //
//----------------------------------------------//
<DEFAULT,BOUNDS> SPECIAL_TOKEN : /* WHITE SPACE */
{
    " "
    |
    "\t"
    |
    "\n"
    |
    "\r"
    |
    "\f"
}// WHITE SPACE

<DEFAULT,BOUNDS> SPECIAL_TOKEN : /* COMMENTS */ 
{
    < "<!--" ( ~["-"] | ( "-" ~["-"] ) )* "-->">
}// COMMENTS

<DEFAULT> TOKEN : /* Reserved Words */
{
   <XML		: "xml">
 | <DOCTYPE : "DOCTYPE">
 | <PUBLIC : "PUBLIC">
 | <encoding		: "encoding">
 | <version		: "version">
 | <XsiNoNamespaceSchemaLocation		: "xsi:noNamespaceSchemaLocation">
 | <XmlnsXsi		: "xmlns:xsi">
 | <_width		: "width" >
 | <_viewPositionY		: "viewPositionY" >
 | <_viewPositionX		: "viewPositionX" >
 | <_height		: "height" >
 | <_Stroke		: "Stroke" >
 | <_modifiable		: "modifiable" >
 | <_GCTransition		: "GCTransition" >
 | <_updated		: "updated" >
 | <_verticalScrollBar		: "verticalScrollBar" >
 | <_useIcon		: "useIcon" >
 | <_threadSpeed		: "threadSpeed" >
 | <_socketPort		: "socketPort" >
 | <_enabled		: "enabled" >
 | <_actionText		: "actionText" >
 | <_name		: "name" >
 | <_GCLink		: "GCLink" >
 | <_horizontalScrollBar		: "horizontalScrollBar" >
 | <_scanCycle		: "scanCycle" >
 | <_saveVersion		: "saveVersion" >
 | <_CGURI		: "CGURI" >
 | <_ownerClass		: "ownerClass" >
 | <_dpwsInterface		: "dpwsInterface" >
 | <_fileName		: "fileName" >
 | <_AnalogIn		: "AnalogIn" >
 | <_socketHost		: "socketHost" >
 | <_color		: "color" >
 | <_initialValue		: "initialValue" >
 | <_constant		: "constant" >
 | <_manAdj		: "manAdj" >
 | <_tokenLuminance		: "tokenLuminance" >
 | <_toObject		: "toObject" >
 | <_MacroStep		: "MacroStep" >
 | <_ExceptionTransition		: "ExceptionTransition" >
 | <_simulationMode		: "simulationMode" >
 | <_dpwsPort		: "dpwsPort" >
 | <_scale		: "scale" >
 | <_AnalogOut		: "AnalogOut" >
 | <_GCInitialStep		: "GCInitialStep" >
 | <_ExitStep		: "ExitStep" >
 | <_conditionVisible		: "conditionVisible" >
 | <_id		: "id" >
 | <_RealVariable		: "RealVariable" >
 | <_StringVariable		: "StringVariable" >
 | <_channel		: "channel" >
 | <_y		: "y" >
 | <_EnterStep		: "EnterStep" >
 | <_x		: "x" >
 | <_WorkspaceObject		: "WorkspaceObject" >
 | <_value		: "value" >
 | <_GCStep		: "GCStep" >
 | <_cyclic		: "cyclic" >
 | <_ParallelJoin		: "ParallelJoin" >
 | <_dimTicks		: "dimTicks" >
 | <_GCDocument		: "GCDocument" >
 | <_fromObject		: "fromObject" >
 | <_exp		: "exp" >
 | <_ParallelSplit		: "ParallelSplit" >
 | <_actionBlockVisible		: "actionBlockVisible" >
}// Reserved Words

<DEFAULT, BOUNDS> TOKEN : /* LITERALS */
{
    < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
        |
        <HEX_LITERAL> (["l","L"])?
        |
        <OCTAL_LITERAL> (["l","L"])?
    >
    |
    < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
    |
    < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
    |
    < #OCTAL_LITERAL: "0" (["0"-"7"])* >
    |
    < FLOAT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
        |
        "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
        |
        (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
        |
        (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
    >
    |
    < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
    |
    < CHARACTER_LITERAL:
        "'"
        (   (~["'","\\","\n","\r"])
            |
            ("\\"
                (   ["n","t","b","r","f","\\","'","\""]
                    |
                    ["0"-"7"] ( ["0"-"7"] )?
                    |
                    ["0"-"3"] ["0"-"7"] ["0"-"7"]
                )
            )
        )
        "'"
    >
    |
    < STRING_LITERAL:
        ("\""
        (   (~["\"","\n","\r"])
        )*
        "\"")
       | ("\'"
        (   (~["\'","\n","\r"])
        )*
        "\'")
    >
}// LITERALS
<DEFAULT, BOUNDS> TOKEN : /* IDENTIFIERS */
{
    < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>|"-")* >
    |
    < #LETTER:
        [
        "$",
        "A"-"Z",
        "_",
        "a"-"z",
        "\u00c0"-"\u00d6",
        "\u00d8"-"\u00f6",
        "\u00f8"-"\u00ff",
        "\u0100"-"\u1fff",
        "\u3040"-"\u318f",
        "\u3300"-"\u337f",
        "\u3400"-"\u3d2d",
        "\u4e00"-"\u9fff",
        "\uf900"-"\ufaff"
        ]
    >
    |
    < #DIGIT:
        [
        "0"-"9",
        "\u0660"-"\u0669",
        "\u06f0"-"\u06f9",
        "\u0966"-"\u096f",
        "\u09e6"-"\u09ef",
        "\u0a66"-"\u0a6f",
        "\u0ae6"-"\u0aef",
        "\u0b66"-"\u0b6f",
        "\u0be7"-"\u0bef",
        "\u0c66"-"\u0c6f",
        "\u0ce6"-"\u0cef",
        "\u0d66"-"\u0d6f",
        "\u0e50"-"\u0e59",
        "\u0ed0"-"\u0ed9",
        "\u1040"-"\u1049"
        ]
    >
}// IDENTIFIERS
<DEFAULT,BOUNDS> TOKEN : /* SEPARATORS */
{
     < LBRACE               : "{"    >
    | < RBRACE               : "}"    >
    | < LBRACKET             : "["    >
    | < RBRACKET             : "]"    >
    | < LPAR                 : "("    >
    | < RPAR                 : ")"    >
    | < DOT                  : "."    >
    | < SEMICOLON            : ";"    >
    | < LTSLASH              : "</"    > : DEFAULT
    | < LTBANG               : "<!"    > : DEFAULT
    | < LT                   : "<"    > : DEFAULT
    | < LTQ                  : "<?"    > : DEFAULT
    | < GT                   : ">"    > : BOUNDS
    | < QGT                  : "?>"    > : BOUNDS
}// SEPARATORS
<DEFAULT,BOUNDS> TOKEN : /* OPERATORS */
{
      < ASSIGN               : "="    >
}// OPERATORS
Start Start()        : {/*@bgen(jjtree) Start */
  Start jjtn000 = new Start(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  Specification()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Specification()                : {/*@bgen(jjtree) Specification */
  Specification jjtn000 = new Specification(JJTSPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Specification */
  try {
/*@egen*/
  XmlHeader()/*@bgen(jjtree) #Opt( true) */
  {
    Opt jjtn001 = new Opt(JJTOPT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  ( [DocType()] )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  true);
    }
  }
/*@egen*/
  ElementList()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void DocType()          : {/*@bgen(jjtree) DocType */
                           DocType jjtn000 = new DocType(JJTDOCTYPE);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/String s;}
{/*@bgen(jjtree) DocType */
  try {
/*@egen*/
  <LTBANG>
  {
		s = new String();
		if (getToken(1).kind != GT ) {
		   s += getData();
        } 
  }/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
     }
/*@egen*/       
     {jjtn000.setSTRING(s);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

JAVACODE
String getData() {
	StringBuffer s = new StringBuffer();
//     jjtThis.someData = true;
    while ((getToken(1)).kind != LT && (getToken(1)).kind != LTSLASH) {
		Token t = getNextToken();
		if (t.specialToken != null) {
			Token tmp_t = t.specialToken;
			while (tmp_t.specialToken != null) {
				tmp_t = tmp_t.specialToken;
			}
			while (tmp_t != null) {
				s.append(tmp_t.image);
				tmp_t = tmp_t.next;
			}
		}
		s.append(t.image);
       s.append(" ");
	}
	return s.toString();
}

void XmlHeader()            : {/*@bgen(jjtree) XmlHeader */
  XmlHeader jjtn000 = new XmlHeader(JJTXMLHEADER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) XmlHeader */
  try {
/*@egen*/
  <LTQ> <XML> AttributeList() <QGT>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ElementList()       : {/*@bgen(jjtree) List */
  List jjtn000 = new List(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) List */
  try {
/*@egen*/
  (Element())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AttributeList()       : {/*@bgen(jjtree) List */
  List jjtn000 = new List(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) List */
  try {
/*@egen*/
  (LOOKAHEAD(2) Attribute())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AttrValue()            : {/*@bgen(jjtree) AttrValue */
                                AttrValue jjtn000 = new AttrValue(JJTATTRVALUE);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) AttrValue */
    try {
/*@egen*/
    t = <STRING_LITERAL>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {jjtn000.setLITERAL(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Encoding()           : {/*@bgen(jjtree) Encoding */
  Encoding jjtn000 = new Encoding(JJTENCODING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Encoding */
  try {
/*@egen*/
  <encoding> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Version()          : {/*@bgen(jjtree) Version */
  Version jjtn000 = new Version(JJTVERSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Version */
  try {
/*@egen*/
  <version> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void XsiNoNamespaceSchemaLocation()                               : {/*@bgen(jjtree) XsiNoNamespaceSchemaLocation */
  XsiNoNamespaceSchemaLocation jjtn000 = new XsiNoNamespaceSchemaLocation(JJTXSINONAMESPACESCHEMALOCATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) XsiNoNamespaceSchemaLocation */
  try {
/*@egen*/
  <XsiNoNamespaceSchemaLocation> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void XmlnsXsi()           : {/*@bgen(jjtree) XmlnsXsi */
  XmlnsXsi jjtn000 = new XmlnsXsi(JJTXMLNSXSI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) XmlnsXsi */
  try {
/*@egen*/
  <XmlnsXsi> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Element()  : {}
{
 ( <LT> (
  _AnalogOut()
  | _Stroke()
  | _GCInitialStep()
  | _GCStep()
  | _ExitStep()
  | _MacroStep()
  | _GCDocument()
  | _AnalogIn()
  | _WorkspaceObject()
  | _ParallelJoin()
  | _EnterStep()
  | _ExceptionTransition()
  | _GCTransition()
  | _GCLink()
  | _RealVariable()
  | _StringVariable()
  | _ParallelSplit()
  | __DefaultElement__() 
 )) 
 | SimpleElement()
}

void SimpleElement() : {}
{
    IntElement()
	| FloatElement()
  	| StringElement()
}

void IntElement()             : {/*@bgen(jjtree) IntElement */
                                  IntElement jjtn000 = new IntElement(JJTINTELEMENT);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) IntElement */
    try {
/*@egen*/
    t = <INTEGER_LITERAL>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{jjtn000.setLITERAL(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FloatElement()               : {/*@bgen(jjtree) FloatElement */
                                      FloatElement jjtn000 = new FloatElement(JJTFLOATELEMENT);
                                      boolean jjtc000 = true;
                                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) FloatElement */
    try {
/*@egen*/
    t = <FLOAT_LITERAL>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{jjtn000.setLITERAL(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void StringElement()                : {/*@bgen(jjtree) StringElement */
                                        StringElement jjtn000 = new StringElement(JJTSTRINGELEMENT);
                                        boolean jjtc000 = true;
                                        jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;String s; }
{/*@bgen(jjtree) StringElement */
        try {
/*@egen*/
	t = <IDENTIFIER>
	{
		s = t.image;
		if (getToken(1).kind != GT ) {
		s += getData();
	}
	}/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {jjtn000.setLITERAL(s);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void __DefaultElement__()                     : {/*@bgen(jjtree) __DefaultElement__ */
                                                  __DefaultElement__ jjtn000 = new __DefaultElement__(JJT__DEFAULTELEMENT__);
                                                  boolean jjtc000 = true;
                                                  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) __DefaultElement__ */
        try {
/*@egen*/
	t = <IDENTIFIER> AttributeList()
 	(">" ElementList() "</" <IDENTIFIER> ">" | ElementList() "/>")/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {jjtn000.setTAG(t.image);}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void Attribute()  : {}
{
  Encoding()
 | Version()
 | XsiNoNamespaceSchemaLocation()
 | XmlnsXsi()
  | _width()
  | _viewPositionY()
  | _viewPositionX()
  | _height()
  | _modifiable()
  | _updated()
  | _verticalScrollBar()
  | _useIcon()
  | _threadSpeed()
  | _socketPort()
  | _enabled()
  | _actionText()
  | _name()
  | _horizontalScrollBar()
  | _scanCycle()
  | _saveVersion()
  | _CGURI()
  | _ownerClass()
  | _fileName()
  | _dpwsInterface()
  | _socketHost()
  | _color()
  | _initialValue()
  | _manAdj()
  | _constant()
  | _toObject()
  | _tokenLuminance()
  | _scale()
  | _dpwsPort()
  | _simulationMode()
  | _conditionVisible()
  | _id()
  | _channel()
  | _y()
  | _x()
  | _value()
  | _cyclic()
  | _dimTicks()
  | _fromObject()
  | _exp()
  | _actionBlockVisible()
  | __DefaultAttribute__() 
  
}

void __DefaultAttribute__()                        : {/*@bgen(jjtree) __DefaultAttribute__ */
                                                      __DefaultAttribute__ jjtn000 = new __DefaultAttribute__(JJT__DEFAULTATTRIBUTE__);
                                                      boolean jjtc000 = true;
                                                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) __DefaultAttribute__ */
  try {
/*@egen*/
  t=<IDENTIFIER> "=" AttrValue()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {jjtn000.setNAME(t.image);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _width()         : {/*@bgen(jjtree) _width */
  _width jjtn000 = new _width(JJT_WIDTH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _width */
  try {
/*@egen*/
  <_width> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _viewPositionY()                 : {/*@bgen(jjtree) _viewPositionY */
  _viewPositionY jjtn000 = new _viewPositionY(JJT_VIEWPOSITIONY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _viewPositionY */
  try {
/*@egen*/
  <_viewPositionY> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _viewPositionX()                 : {/*@bgen(jjtree) _viewPositionX */
  _viewPositionX jjtn000 = new _viewPositionX(JJT_VIEWPOSITIONX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _viewPositionX */
  try {
/*@egen*/
  <_viewPositionX> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _height()          : {/*@bgen(jjtree) _height */
  _height jjtn000 = new _height(JJT_HEIGHT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _height */
  try {
/*@egen*/
  <_height> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _Stroke()          : {/*@bgen(jjtree) _Stroke */
  _Stroke jjtn000 = new _Stroke(JJT_STROKE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _Stroke */
   try {
/*@egen*/
   <_Stroke> AttributeList()
  ( <GT> ElementList()  "</" <_Stroke>  ">" | ElementList() "/>" )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void _modifiable()              : {/*@bgen(jjtree) _modifiable */
  _modifiable jjtn000 = new _modifiable(JJT_MODIFIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _modifiable */
  try {
/*@egen*/
  <_modifiable> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _GCTransition()                : {/*@bgen(jjtree) _GCTransition */
  _GCTransition jjtn000 = new _GCTransition(JJT_GCTRANSITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _GCTransition */
   try {
/*@egen*/
   <_GCTransition> AttributeList()
  ( <GT> ElementList()  "</" <_GCTransition>  ">" | ElementList() "/>" )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void _updated()           : {/*@bgen(jjtree) _updated */
  _updated jjtn000 = new _updated(JJT_UPDATED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _updated */
  try {
/*@egen*/
  <_updated> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _verticalScrollBar()                     : {/*@bgen(jjtree) _verticalScrollBar */
  _verticalScrollBar jjtn000 = new _verticalScrollBar(JJT_VERTICALSCROLLBAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _verticalScrollBar */
  try {
/*@egen*/
  <_verticalScrollBar> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _useIcon()           : {/*@bgen(jjtree) _useIcon */
  _useIcon jjtn000 = new _useIcon(JJT_USEICON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _useIcon */
  try {
/*@egen*/
  <_useIcon> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _threadSpeed()               : {/*@bgen(jjtree) _threadSpeed */
  _threadSpeed jjtn000 = new _threadSpeed(JJT_THREADSPEED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _threadSpeed */
  try {
/*@egen*/
  <_threadSpeed> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _socketPort()              : {/*@bgen(jjtree) _socketPort */
  _socketPort jjtn000 = new _socketPort(JJT_SOCKETPORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _socketPort */
  try {
/*@egen*/
  <_socketPort> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _enabled()           : {/*@bgen(jjtree) _enabled */
  _enabled jjtn000 = new _enabled(JJT_ENABLED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _enabled */
  try {
/*@egen*/
  <_enabled> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _actionText()              : {/*@bgen(jjtree) _actionText */
  _actionText jjtn000 = new _actionText(JJT_ACTIONTEXT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _actionText */
  try {
/*@egen*/
  <_actionText> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _name()        : {/*@bgen(jjtree) _name */
  _name jjtn000 = new _name(JJT_NAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _name */
  try {
/*@egen*/
  <_name> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _GCLink()          : {/*@bgen(jjtree) _GCLink */
  _GCLink jjtn000 = new _GCLink(JJT_GCLINK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _GCLink */
   try {
/*@egen*/
   <_GCLink> AttributeList()
  ( <GT> ElementList()  "</" <_GCLink>  ">" | ElementList() "/>" )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void _horizontalScrollBar()                       : {/*@bgen(jjtree) _horizontalScrollBar */
  _horizontalScrollBar jjtn000 = new _horizontalScrollBar(JJT_HORIZONTALSCROLLBAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _horizontalScrollBar */
  try {
/*@egen*/
  <_horizontalScrollBar> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _scanCycle()             : {/*@bgen(jjtree) _scanCycle */
  _scanCycle jjtn000 = new _scanCycle(JJT_SCANCYCLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _scanCycle */
  try {
/*@egen*/
  <_scanCycle> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _saveVersion()               : {/*@bgen(jjtree) _saveVersion */
  _saveVersion jjtn000 = new _saveVersion(JJT_SAVEVERSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _saveVersion */
  try {
/*@egen*/
  <_saveVersion> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _CGURI()         : {/*@bgen(jjtree) _CGURI */
  _CGURI jjtn000 = new _CGURI(JJT_CGURI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _CGURI */
  try {
/*@egen*/
  <_CGURI> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _ownerClass()              : {/*@bgen(jjtree) _ownerClass */
  _ownerClass jjtn000 = new _ownerClass(JJT_OWNERCLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _ownerClass */
  try {
/*@egen*/
  <_ownerClass> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _dpwsInterface()                 : {/*@bgen(jjtree) _dpwsInterface */
  _dpwsInterface jjtn000 = new _dpwsInterface(JJT_DPWSINTERFACE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _dpwsInterface */
  try {
/*@egen*/
  <_dpwsInterface> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _fileName()            : {/*@bgen(jjtree) _fileName */
  _fileName jjtn000 = new _fileName(JJT_FILENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _fileName */
  try {
/*@egen*/
  <_fileName> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _AnalogIn()            : {/*@bgen(jjtree) _AnalogIn */
  _AnalogIn jjtn000 = new _AnalogIn(JJT_ANALOGIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _AnalogIn */
   try {
/*@egen*/
   <_AnalogIn> AttributeList()
  ( <GT> ElementList()  "</" <_AnalogIn>  ">" | ElementList() "/>" )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void _socketHost()              : {/*@bgen(jjtree) _socketHost */
  _socketHost jjtn000 = new _socketHost(JJT_SOCKETHOST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _socketHost */
  try {
/*@egen*/
  <_socketHost> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _color()         : {/*@bgen(jjtree) _color */
  _color jjtn000 = new _color(JJT_COLOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _color */
  try {
/*@egen*/
  <_color> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _initialValue()                : {/*@bgen(jjtree) _initialValue */
  _initialValue jjtn000 = new _initialValue(JJT_INITIALVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _initialValue */
  try {
/*@egen*/
  <_initialValue> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _constant()            : {/*@bgen(jjtree) _constant */
  _constant jjtn000 = new _constant(JJT_CONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _constant */
  try {
/*@egen*/
  <_constant> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _manAdj()          : {/*@bgen(jjtree) _manAdj */
  _manAdj jjtn000 = new _manAdj(JJT_MANADJ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _manAdj */
  try {
/*@egen*/
  <_manAdj> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _tokenLuminance()                  : {/*@bgen(jjtree) _tokenLuminance */
  _tokenLuminance jjtn000 = new _tokenLuminance(JJT_TOKENLUMINANCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _tokenLuminance */
  try {
/*@egen*/
  <_tokenLuminance> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _toObject()            : {/*@bgen(jjtree) _toObject */
  _toObject jjtn000 = new _toObject(JJT_TOOBJECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _toObject */
  try {
/*@egen*/
  <_toObject> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _MacroStep()             : {/*@bgen(jjtree) _MacroStep */
  _MacroStep jjtn000 = new _MacroStep(JJT_MACROSTEP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _MacroStep */
   try {
/*@egen*/
   <_MacroStep> AttributeList()
  ( <GT> ElementList()  "</" <_MacroStep>  ">" | ElementList() "/>" )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void _ExceptionTransition()                       : {/*@bgen(jjtree) _ExceptionTransition */
  _ExceptionTransition jjtn000 = new _ExceptionTransition(JJT_EXCEPTIONTRANSITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _ExceptionTransition */
   try {
/*@egen*/
   <_ExceptionTransition> AttributeList()
  ( <GT> ElementList()  "</" <_ExceptionTransition>  ">" | ElementList() "/>" )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void _simulationMode()                  : {/*@bgen(jjtree) _simulationMode */
  _simulationMode jjtn000 = new _simulationMode(JJT_SIMULATIONMODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _simulationMode */
  try {
/*@egen*/
  <_simulationMode> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _dpwsPort()            : {/*@bgen(jjtree) _dpwsPort */
  _dpwsPort jjtn000 = new _dpwsPort(JJT_DPWSPORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _dpwsPort */
  try {
/*@egen*/
  <_dpwsPort> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _scale()         : {/*@bgen(jjtree) _scale */
  _scale jjtn000 = new _scale(JJT_SCALE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _scale */
  try {
/*@egen*/
  <_scale> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _AnalogOut()             : {/*@bgen(jjtree) _AnalogOut */
  _AnalogOut jjtn000 = new _AnalogOut(JJT_ANALOGOUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _AnalogOut */
   try {
/*@egen*/
   <_AnalogOut> AttributeList()
  ( <GT> ElementList()  "</" <_AnalogOut>  ">" | ElementList() "/>" )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void _GCInitialStep()                 : {/*@bgen(jjtree) _GCInitialStep */
  _GCInitialStep jjtn000 = new _GCInitialStep(JJT_GCINITIALSTEP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _GCInitialStep */
   try {
/*@egen*/
   <_GCInitialStep> AttributeList()
  ( <GT> ElementList()  "</" <_GCInitialStep>  ">" | ElementList() "/>" )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void _ExitStep()            : {/*@bgen(jjtree) _ExitStep */
  _ExitStep jjtn000 = new _ExitStep(JJT_EXITSTEP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _ExitStep */
   try {
/*@egen*/
   <_ExitStep> AttributeList()
  ( <GT> ElementList()  "</" <_ExitStep>  ">" | ElementList() "/>" )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void _conditionVisible()                    : {/*@bgen(jjtree) _conditionVisible */
  _conditionVisible jjtn000 = new _conditionVisible(JJT_CONDITIONVISIBLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _conditionVisible */
  try {
/*@egen*/
  <_conditionVisible> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _id()      : {/*@bgen(jjtree) _id */
  _id jjtn000 = new _id(JJT_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _id */
  try {
/*@egen*/
  <_id> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _RealVariable()                : {/*@bgen(jjtree) _RealVariable */
  _RealVariable jjtn000 = new _RealVariable(JJT_REALVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _RealVariable */
   try {
/*@egen*/
   <_RealVariable> AttributeList()
  ( <GT> ElementList()  "</" <_RealVariable>  ">" | ElementList() "/>" )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void _StringVariable()                  : {/*@bgen(jjtree) _StringVariable */
  _StringVariable jjtn000 = new _StringVariable(JJT_STRINGVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _StringVariable */
   try {
/*@egen*/
   <_StringVariable> AttributeList()
  ( <GT> ElementList()  "</" <_StringVariable>  ">" | ElementList() "/>" )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void _channel()           : {/*@bgen(jjtree) _channel */
  _channel jjtn000 = new _channel(JJT_CHANNEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _channel */
  try {
/*@egen*/
  <_channel> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _y()     : {/*@bgen(jjtree) _y */
  _y jjtn000 = new _y(JJT_Y);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _y */
  try {
/*@egen*/
  <_y> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _EnterStep()             : {/*@bgen(jjtree) _EnterStep */
  _EnterStep jjtn000 = new _EnterStep(JJT_ENTERSTEP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _EnterStep */
   try {
/*@egen*/
   <_EnterStep> AttributeList()
  ( <GT> ElementList()  "</" <_EnterStep>  ">" | ElementList() "/>" )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void _x()     : {/*@bgen(jjtree) _x */
  _x jjtn000 = new _x(JJT_X);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _x */
  try {
/*@egen*/
  <_x> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _WorkspaceObject()                   : {/*@bgen(jjtree) _WorkspaceObject */
  _WorkspaceObject jjtn000 = new _WorkspaceObject(JJT_WORKSPACEOBJECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _WorkspaceObject */
   try {
/*@egen*/
   <_WorkspaceObject> AttributeList()
  ( <GT> ElementList()  "</" <_WorkspaceObject>  ">" | ElementList() "/>" )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void _value()         : {/*@bgen(jjtree) _value */
  _value jjtn000 = new _value(JJT_VALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _value */
  try {
/*@egen*/
  <_value> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _GCStep()          : {/*@bgen(jjtree) _GCStep */
  _GCStep jjtn000 = new _GCStep(JJT_GCSTEP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _GCStep */
   try {
/*@egen*/
   <_GCStep> AttributeList()
  ( <GT> ElementList()  "</" <_GCStep>  ">" | ElementList() "/>" )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void _cyclic()          : {/*@bgen(jjtree) _cyclic */
  _cyclic jjtn000 = new _cyclic(JJT_CYCLIC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _cyclic */
  try {
/*@egen*/
  <_cyclic> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _ParallelJoin()                : {/*@bgen(jjtree) _ParallelJoin */
  _ParallelJoin jjtn000 = new _ParallelJoin(JJT_PARALLELJOIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _ParallelJoin */
   try {
/*@egen*/
   <_ParallelJoin> AttributeList()
  ( <GT> ElementList()  "</" <_ParallelJoin>  ">" | ElementList() "/>" )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void _dimTicks()            : {/*@bgen(jjtree) _dimTicks */
  _dimTicks jjtn000 = new _dimTicks(JJT_DIMTICKS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _dimTicks */
  try {
/*@egen*/
  <_dimTicks> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _GCDocument()              : {/*@bgen(jjtree) _GCDocument */
  _GCDocument jjtn000 = new _GCDocument(JJT_GCDOCUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _GCDocument */
   try {
/*@egen*/
   <_GCDocument> AttributeList()
  ( <GT> ElementList()  "</" <_GCDocument>  ">" | ElementList() "/>" )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void _fromObject()              : {/*@bgen(jjtree) _fromObject */
  _fromObject jjtn000 = new _fromObject(JJT_FROMOBJECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _fromObject */
  try {
/*@egen*/
  <_fromObject> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _exp()       : {/*@bgen(jjtree) _exp */
  _exp jjtn000 = new _exp(JJT_EXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _exp */
  try {
/*@egen*/
  <_exp> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void _ParallelSplit()                 : {/*@bgen(jjtree) _ParallelSplit */
  _ParallelSplit jjtn000 = new _ParallelSplit(JJT_PARALLELSPLIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _ParallelSplit */
   try {
/*@egen*/
   <_ParallelSplit> AttributeList()
  ( <GT> ElementList()  "</" <_ParallelSplit>  ">" | ElementList() "/>" )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void _actionBlockVisible()                      : {/*@bgen(jjtree) _actionBlockVisible */
  _actionBlockVisible jjtn000 = new _actionBlockVisible(JJT_ACTIONBLOCKVISIBLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _actionBlockVisible */
  try {
/*@egen*/
  <_actionBlockVisible> "=" AttrValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
